class Solution {
private:
    void traversal(TreeNode* node, vector<int>&path, vector<string>&result){
        path.push_back(node->val);//中，path捕获节点值，result存储string。
        if(node->left == NULL && node->right == NULL){
            string sPath;
            for(int i = 0; i < path.size() - 1; i++){
                sPath += to_string(path[i]);//将path转换为string
                sPath += "->";
            }
            sPath += to_string(path[path.size() - 1]);//最后一个要单独加
            result.push_back(sPath);
            return;
        }
        if(node->left){
            traversal(node->left, path, result);
            path.pop_back();//每添加一个result就要消除一个path
        }
        if(node->right){
            traversal(node->right, path, result);
            path.pop_back();
        }
    }

public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> result;
        vector<int> path;
        if(root == NULL) return result;
        else{
        traversal(root, path, result);
        return result;
        }
    }
};
