#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include"SListHead.h"


typedef int SLTDataType;

typedef struct SListNode//节点类型变量
{
	SLTDataType data;//value
	struct SListNode* next;//存储下一个节点的地址
}SListNode, SLN;


SListNode* BuySListNode(SLTDataType x)//新节点函数,x代表节点内的信号值。
{
	SListNode* newnode = (SListNode*)malloc(sizeof(SListNode));
	if (newnode == NULL)
	{
		printf("malloc fail\n");
		exit(-1);
	}
	else
	{
		newnode -> data = x;
		newnode -> next = NULL;
	}
	return newnode;
}

void SListPushBack(SListNode** pphead, SLTDataType x)//尾插函数(pphead是传进来的链表节点地址的地址)
{
	assert(pphead);//断言函数，用于确认此指针可以被更改。（不是0指针）

	SListNode* newnode = BuySListNode(x);
	if (*pphead == NULL)//如果原列表为空，则插入的节点为头节点。
	{//头指针是用来指向链表的 第一个节点 的指针。如果链表为空，头指针会被设置为 NULL，表示链表没有任何节点。
		*pphead = newnode;
	}
	else
	{
		SListNode* tail = *pphead;
		while (tail->next != NULL)
		{
			tail = tail->next;
		}
		tail->next = newnode;
	}
}

void SListPushFront(SListNode** pphead, SLTDataType x)//pphead是节点地址的地址,*pphead是节点的地址
{//**pphead是节点内容。通过**pphead将pphead的全部信息调入函数，实现对节点地址的修改。
	assert(pphead);

	SListNode* newnode = BuySListNode(x);
	newnode->next = *pphead;
	*pphead = newnode;
}

void SListPopBack(SListNode** pphead)//尾删函数
{
	assert(pphead);

	if (*pphead == NULL)
	{
		return;
	}
	else if ((*pphead)->next == NULL)
	{
		free(*pphead);
		*pphead = NULL;
	}
	else
	{
		SListNode* tail = *pphead;
		while (tail->next->next != NULL)
		{
			tail = tail->next;
		}
		free(tail->next);
		tail->next = NULL;
	}
	return;
}

void SListPopFront(SListNode** pphead)//头删函数
{
	assert(pphead);

	if (*pphead == NULL)
	{
		return;
	}
	else
	{
		SListNode* oldhead = *pphead;
		*pphead = (*pphead)->next;
		free(oldhead);
		oldhead = NULL;
	}
	return;
}

SListNode* SListFind(SListNode* phead, SLTDataType x)//查找函数
{
	assert(phead);

	SListNode* curt = phead;
	while (curt->next != NULL)
	{
		if (curt->data == x)
		{
			return curt;
		}
		else
		{
			curt = curt->next;
		}
	}
	return NULL;
}

void SListmodify(SListNode* phead, SListNode* pos, SLTDataType x)//更改函数
{
	assert(phead);
	
	pos->data = x;

	return;
}

void SListInsertAfter(SListNode** pphead, SListNode* pos, SLTDataType x)//后插函数
{
	assert(pphead);
	assert(pos);

	SListNode* newnode = BuySListNode(x);
	SListNode* next = pos->next;
	pos->next = newnode;
	newnode->next = next;

	return;
}

void SListInsert(SListNode** pphead, SListNode* pos, SLTDataType x)//前插函数
{
	assert(pphead);
	assert(pos);

	if (pos == *pphead)
	{
		SListPushFront(pphead, x);
	}
	else
	{
		SListNode* tail = *pphead;
		while (tail->next != NULL)
		{
			if (tail->next == pos)
			{
				SListNode* newnode = BuySListNode(x);
				tail->next = newnode;
				tail->next->next = pos;
				return;
			}
			else 
			{
				tail = tail->next;
			}
		}
	}
	return;
}

void SListErase(SListNode** pphead, SListNode** pos)//前删函数
{
	assert(pphead);
	assert(pos);

	if (*pos == *pphead)
	{
		SListPopFront(pphead);
	}
	else
	{
		SListNode* tail = *pphead;
		while (tail->next != NULL)
		{
			if (tail->next == *pos)
			{
				tail->next = (*pos)->next;//为了能够修改 pos（即目标节点）的 前驱节点的 next 指针
				free(*pos);//我们需要传递 SListNode** pos，即 pos 的地址
				*pos = NULL;//
				pos = NULL;
				return;
			}
			else
			{
				tail = tail->next;
			}
		}
	}
	return;
}

void SListEraseAfter(SListNode** pphead, SListNode* pos)//后删函数
{
	assert(pphead);
	assert(pos);

	SListNode* next = pos->next->next;
	free(pos->next);
	pos->next = next;

	return;
}

void SListPrint(SListNode* phead)//打印链表
{
	SListNode* cur = phead;
	while (cur != NULL)
	{
		printf("%d->", cur->data);
		cur = cur->next;
	}
	printf("NULL\n");
}

void SListDestroy(SListNode** pphead)//销毁链表
{
	assert(pphead);

	SListNode* curt = *pphead;
	while (curt)
	{
		SListNode* next = curt->next;
		free(curt);
		curt = next;
	}

	*pphead = NULL;

	return;
}
